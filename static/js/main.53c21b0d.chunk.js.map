{"version":3,"sources":["Ball.js","Star.js","Lotto.js","App.js","serviceWorker.js","index.js"],"names":["Ball","className","this","props","num","Component","Star","twoDigitNum","number","slice","Lotto","state","nums","Array","from","length","totalBalls","numsStar","totalStars","id","uuidv4","handleClick","bind","min","max","Math","floor","random","arrNums","arrNumsStar","randNum","getRandomNum","indexOf","push","randNumStar","setState","curState","sort","a","b","getRandomNumArr","title","map","n","key","onClick","defaultProps","maxNum","maxNumStar","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAYeA,G,mLANX,OACA,yBAAKC,UAAU,QAAQC,KAAKC,MAAMC,S,GAHnBC,cCOJC,G,6KANX,OACA,yBAAKL,UAAU,aAAaC,KAAKC,MAAMC,S,GAHxBC,c,QCIfE,EAAc,SAACC,GAAD,OAAaA,GAAU,GAAK,WAAIA,GAASC,OAAO,GAAKD,GAEjEE,E,kDAQJ,WAAYP,GAAQ,IAAD,8BACjB,cAAMA,IACDQ,MAAQ,CAACC,KAAMC,MAAMC,KAAK,CAACC,OAAQ,EAAKZ,MAAMa,aACnDC,SAAUJ,MAAMC,KAAK,CAACC,OAAQ,EAAKZ,MAAMe,aACzCC,GAAIC,eAEJ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBANF,E,yDASNC,EAAKC,GACd,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,IAAQA,I,wCAOnD,IAHA,IAAIK,EAAU,GACVC,EAAc,GAEXD,EAAQb,OAASb,KAAKC,MAAMa,YAAY,CAC7C,IAAIc,EAAU5B,KAAK6B,aAAa,EAAE,KACD,IAA9BH,EAAQI,QAAQF,IACjBF,EAAQK,KAAKH,GAIjB,KAAOD,EAAYd,OAASb,KAAKC,MAAMe,YAAY,CACjD,IAAIgB,EAAchC,KAAK6B,aAAa,EAAE,KACG,IAAtCF,EAAYG,QAAQE,IACrBL,EAAYI,KAAKC,GAIrBhC,KAAKiC,UAAS,SAAAC,GAAQ,MAAK,CACzBxB,KAAMgB,EAAQS,MAAK,SAASC,EAAGC,GAAG,OAAOD,EAAEC,KAC3CtB,SAAUY,EAAYQ,MAAK,SAASC,EAAGC,GAAG,OAAOD,EAAEC,W,oCAKrDrC,KAAKsC,oB,+BAIL,OACE,yBAAKvC,UAAU,SACb,4BAAKC,KAAKC,MAAMsC,OAChB,6BACGvC,KAAKS,MAAMC,KAAK8B,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAMvC,IAAKG,EAAYoC,GAAIC,IAAKxB,mBACzDlB,KAAKS,MAAMM,SAASyB,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAMvC,IAAKG,EAAYoC,GAAIC,IAAKxB,oBAEhE,4BAAQyB,QAAS3C,KAAKmB,aAAtB,iB,GAzDYhB,aAAdK,EACGoC,aAAe,CACpBL,MAAO,QACPzB,WAAY,EACZE,WAAY,EACZ6B,OAAQ,GACRC,WAAY,GA2DDtC,QC9DAuC,MARf,WACE,OACE,yBAAKhD,UAAU,OACb,kBAAC,EAAD,CAAOwC,MAAM,eAAezB,WAAY,EAAGE,WAAY,MCKzCgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.53c21b0d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Ball.css';\n\n\nclass Ball extends Component {\n  render() {\n    return (\n    <div className=\"Ball\">{this.props.num}</div>\n    )\n  }\n}\n\nexport default Ball;","import React, { Component } from 'react';\nimport './Star.css';\n\nclass Star extends Component {\n  render() {\n    return (\n    <div className=\"Star Ball\">{this.props.num}</div>\n    )\n  }\n}\n\nexport default Star;","import React, { Component } from 'react';\nimport './Lotto.css';\nimport Ball from './Ball';\nimport Star from './Star';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nlet twoDigitNum = (number) => (number <= 10 ? `0${number}`.slice(-2) : number);\n\nclass Lotto extends Component {\n  static defaultProps = {\n    title: 'Lotto',\n    totalBalls: 6,\n    totalStars: 0,\n    maxNum: 40,\n    maxNumStar: 9,\n  }\n  constructor(props) {\n    super(props);\n    this.state = {nums: Array.from({length: this.props.totalBalls}),\n    numsStar: Array.from({length: this.props.totalStars}),\n    id: uuidv4()\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  getRandomNum(min, max) {\n      return Math.floor(Math.random() * (max - min)) + min;\n    }\n  \n  getRandomNumArr() {\n    let arrNums = [];\n    let arrNumsStar = [];\n    // Normal Numbers\n    while (arrNums.length < this.props.totalBalls) {\n      let randNum = this.getRandomNum(1,50);\n      if(arrNums.indexOf(randNum) === -1){\n        arrNums.push(randNum);\n      }\n    }\n    // Stars Numbers\n    while (arrNumsStar.length < this.props.totalStars) {\n      let randNumStar = this.getRandomNum(1,12);\n      if(arrNumsStar.indexOf(randNumStar) === -1){\n        arrNumsStar.push(randNumStar);\n      }\n    }\n\n    this.setState(curState => ({\n      nums: arrNums.sort(function(a, b){return a-b}),\n      numsStar: arrNumsStar.sort(function(a, b){return a-b}),\n    }))\n  }\n\n  handleClick() {\n    this.getRandomNumArr();\n  }\n\n  render() {\n    return (\n      <div className='Lotto'>\n        <h1>{this.props.title}</h1>\n        <div>\n          {this.state.nums.map(n => <Ball num={twoDigitNum(n)} key={uuidv4()} />)}\n          {this.state.numsStar.map(n => <Star num={twoDigitNum(n)} key={uuidv4()} />)}\n        </div>\n        <button onClick={this.handleClick}>Generate</button>\n      </div>\n    );\n  }\n}\n\n\n\nexport default Lotto;\n","import React from 'react';\nimport './App.css';\nimport Lotto from './Lotto';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Lotto title=\"Euromillones\" totalBalls={5} totalStars={2}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}