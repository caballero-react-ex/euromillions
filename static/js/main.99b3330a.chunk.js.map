{"version":3,"sources":["comps/Ball.js","comps/Star.js","comps/Header.js","comps/Lotto.js","comps/App.js","serviceWorker.js","index.js"],"names":["Ball","className","this","props","rolling","num","Component","Star","Header","Lotto","state","nums","Array","from","length","totalBalls","numsStar","totalStars","id","uuidv4","handleClick","bind","min","max","Math","floor","random","arrNums","arrNumsStar","randNum","getRandomNum","indexOf","push","randNumStar","setState","curState","sort","a","b","getRandomNumArr","setTimeout","twoDigitNum","number","slice","map","n","key","onClick","disabled","defaultProps","title","maxNum","maxNumStar","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.99b3330a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Ball extends Component {\n  render() {\n    return (\n    <div className={`Ball ${this.props.rolling && \"shaking\"}`}>{this.props.num}</div>\n    )\n  }\n}\n\nexport default Ball;\n","import React, { Component } from 'react';\n\n\nclass Star extends Component {\n  render() {\n    return (\n      <div className={`Ball Star ${this.props.rolling && \"shaking\"}`}>\n        {this.props.num}\n        <span className=\"Star-icon material-icons\">grade</span>\n      </div>\n    )\n  }\n}\n\nexport default Star;\n","import React, { Component } from 'react';\n\n\nclass Header extends Component {\n  render() {\n    return (\n      <div className=\"Header\">\n        <p className=\"Header-title\">Euromillions</p>\n        <p className=\"Header-title Header-text\">Number Generator</p>\n      </div>\n    )\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nimport Ball from './Ball';\nimport Star from './Star';\nimport Header from './Header';\n\nimport { v4 as uuidv4 } from 'uuid';\n\n\nclass Lotto extends Component {\n  static defaultProps = {\n    title: 'Lotto',\n    totalBalls: 6,\n    totalStars: 0,\n    maxNum: 40,\n    maxNumStar: 9,\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      nums: Array.from({length: this.props.totalBalls}),\n      numsStar: Array.from({length: this.props.totalStars}),\n      id: uuidv4(),\n      rolling: false\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  getRandomNum(min, max) {\n      return Math.floor(Math.random() * (max - min)) + min;\n    }\n  \n  getRandomNumArr() {\n    let arrNums = [];\n    let arrNumsStar = [];\n    // Ball Numbers\n    while (arrNums.length < this.props.totalBalls) {\n      let randNum = this.getRandomNum(1,50);\n      if(arrNums.indexOf(randNum) === -1){\n        arrNums.push(randNum);\n      }\n    }\n    // Stars Numbers\n    while (arrNumsStar.length < this.props.totalStars) {\n      let randNumStar = this.getRandomNum(1,12);\n      if(arrNumsStar.indexOf(randNumStar) === -1){\n        arrNumsStar.push(randNumStar);\n      }\n    }\n    // Sort the numbers from lowest to highest\n    this.setState(curState => ({\n      nums: arrNums.sort(function(a, b){return a-b}),\n      numsStar: arrNumsStar.sort(function(a, b){return a-b}),\n    }))\n  }\n\n  handleClick() {\n    this.getRandomNumArr();\n\n    //set state with new rolls\n    this.setState({ rolling: true });\n\n    //wait one second, then set rolling to false\n    setTimeout(() => {\n      this.setState({ rolling: false });\n    }, 1000);\n  }\n\n  render() {\n\n    let twoDigitNum = (number) => (number <= 10 ? `0${number}`.slice(-2) : number);\n\n    return (\n      <div className='Lotto'>\n        < Header />\n        <span className=\"Lotto-header-line\"></span>\n        <div className='Lotto-Ball-container'>\n          {this.state.nums.map(n => \n            < Ball \n              num={twoDigitNum(n)} \n              key={uuidv4()} \n              rolling={this.state.rolling} \n            />\n          )}\n          {this.state.numsStar.map(n => \n            < Star \n              num={twoDigitNum(n)} \n              key={uuidv4()} \n              rolling={this.state.rolling} \n            />\n          )}\n        </div>\n        <button className={`Lotto-btn ${this.state.rolling && \"btn-disable\"}`} onClick={this.handleClick} disabled={this.state.rolling}>\n        {this.state.rolling ? \"Getting...\" : \"Get Numbers\"}\n        </button>\n      </div>\n    );\n  }\n}\n\n\n\nexport default Lotto;\n","import React from 'react';\nimport '../main.scss';\n\nimport Lotto from './Lotto';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Lotto \n      title=\"Euromillones\" \n      totalBalls={5} \n      totalStars={2}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './comps/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}